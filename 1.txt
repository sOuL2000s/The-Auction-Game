import os
import json
import random
import google.generativeai as genai
import csv # Import for CSV file handling
import io # Import for StringIO

from flask import Flask, request, jsonify, render_template_string

# --- Configuration ---
# Gemini API Key - IMPORTANT: In a real-world scenario, store this in environment variables.
# For Render deployment, you would typically set this in Render's environment variables.
# For this exercise, it's embedded as requested.
GEMINI_API_KEY = "AIzaSyCzx6ReMk8ohPJcCjGwHHzu7SvFccJqAbA" 
GEMINI_MODEL_NAME = "gemini-2.5-flash-preview-05-20"

# Configure Gemini API
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(GEMINI_MODEL_NAME)

app = Flask(__name__)

# --- Game State ---
# Define a function to get the initial game state, allowing for easy reset
def get_initial_game_state():
    return {
        "participants": {},  # {player_name: budget}
        "player_items": {},  # {player_name: [item1, item2]}
        "item_list": [],     # List of items to be auctioned
        "auction_history": [], # List of past events/bids (e.g., "ItemX sold to PlayerY for Z credits")
        "current_item": None,
        "current_bid": 0,
        "high_bidder": None,
        "status": "waiting_for_init", # waiting_for_init, waiting_for_items, bidding, item_sold, game_over, waiting_for_auction_start
        "chat_log": [{"sender": "Auctioneer", "message": "Welcome to the AI Auctioneer Game! To begin, type: `Start a new auction game with players John, Jane, Mike, and a budget of 100 for everyone.` (Or add your own player names and budget!)"}],      # For displaying chat messages in the UI
        "last_processed_action": None # To prevent reprocessing same action from Gemini
    }

game_state = get_initial_game_state()

# --- Gemini Interaction Functions ---

def generate_gemini_response(user_input, current_game_state_for_gemini):
    """
    Sends user input and current game state to Gemini and expects a narrative
    plus a structured GAME_ACTION if applicable.
    """
    
    # Prepare the context for Gemini
    game_context = f"""
    Current Game State:
    Status: {current_game_state_for_gemini['status']}
    Participants: {json.dumps(current_game_state_for_gemini['participants'])}
    Items Available for Auction: {json.dumps(current_game_state_for_gemini['item_list'])}
    Current Item for Auction: {current_game_state_for_gemini['current_item']}
    Current Bid: {current_game_state_for_gemini['current_bid']}
    High Bidder: {current_game_state_for_gemini['high_bidder']}
    """
    
    # Crucial System Prompt for Gemini to follow the rules
    system_prompt = f"""
    You are the Auctioneer for an auction game. Your role is to narrate the auction,
    acknowledge player actions, and guide the game.
    
    When a user provides input that triggers a game state change (like initializing players,
    adding items, placing a bid, or selling an item), you MUST also include a
    'GAME_ACTION:' tag followed by a JSON object on a new line.
    
    The JSON object should have a 'type' field indicating the action and other relevant data.
    
    Here are the expected GAME_ACTION types and their structures:

    1.  **Initialize Game:** When players and a starting budget are set.
        `GAME_ACTION: {{"type": "init_game", "players": ["Player1", "Player2"], "budget": 100}}`

    2.  **Add Items:** When new items are added to the auction list.
        `GAME_ACTION: {{"type": "add_items", "items": ["Item A", "Item B"]}}`

    3.  **Start Item Auction:** When a new item's auction begins.
        `GAME_ACTION: {{"type": "start_item_auction", "item": "Item Name"}}`

    4.  **Place Bid:** When a player makes a bid.
        `GAME_ACTION: {{"type": "bid", "player": "Player Name", "amount": 5}}`
        *Ensure bid is valid (>= current_bid + 1 and within budget)*

    5.  **Sell Item:** When an item is sold. This can be to the high bidder, or if no bids, potentially for 0 credits to a named player, or if everyone passes, the item might be declared 'unsold'.
        `GAME_ACTION: {{"type": "sell_item", "player": "Player Name", "amount": 10, "item": "Item Name"}}`
        *If no bids, the 'player' and 'amount' can be from user explicit instruction (e.g., "sell to John for 0"), or inferred (if all pass, it's unsold)*
        *If no player or amount is provided by the user, and no bids, the system will handle it as 'unsold'.*

    6.  **Player Passes:** When a player explicitly passes their turn or passes on an item.
        `GAME_ACTION: {{"type": "pass", "player": "Player Name"}}`

    7.  **No Valid Action:** If user input doesn't correspond to a game action, just provide narrative.
        `GAME_ACTION: {{"type": "no_action"}}`

    You must be clever and intelligent. Always provide a natural language response first,
    then the `GAME_ACTION` if applicable.
    
    Remember the auction rules: Bids start from 1 credit. Budgets decrease after purchase.
    
    Example interaction:
    User: "Start game with John, Jane, Mike, all with 100 credits."
    You: "Welcome, John, Jane, and Mike! Each of you starts with 100 credits. Let the bidding begin!
    GAME_ACTION: {{"type": "init_game", "players": ["John", "Jane", "Mike"], "budget": 100}}"
    
    User: "Add items: Old Vase, Diamond Ring."
    You: "Excellent! We have Old Vase, Diamond Ring ready for auction.
    GAME_ACTION: {{"type": "add_items", "items": ["Old Vase", "Diamond Ring"]}}"
    
    User: "Start auction for the first item."
    You: "Our first item up for bid is the magnificent Old Vase! Who will start us off? Bids begin at 1 credit.
    GAME_ACTION: {{"type": "start_item_auction", "item": "Old Vase"}}"
    
    User: "John bids 5."
    You: "A bold opening bid of 5 credits from John! The current high bid stands at 5. Any other contenders?
    GAME_ACTION: {{"type": "bid", "player": "John", "amount": 5}}"
    
    User: "Sell it!" (Assuming John is high bidder at 5)
    You: "Sold! The Old Vase goes to John for 5 credits! John's new budget is 95.
    GAME_ACTION: {{"type": "sell_item", "player": "John", "amount": 5, "item": "Old Vase"}}"

    User: "No one bids, just sell the item." (Assuming current_item is "Rare Painting", no current bid)
    You: "As there are no bids on the Rare Painting, it remains unsold for now. Perhaps it will return later, or maybe we move on.
    GAME_ACTION: {{"type": "sell_item", "item": "Rare Painting", "player": null, "amount": 0}}"
    
    Strictly adhere to this format. Do not invent other GAME_ACTION types.
    """

    full_prompt = f"{system_prompt}\n\n{game_context}\n\nUser Input: {user_input}"
    
    try:
        response = model.generate_content(full_prompt)
        return response.text
    except Exception as e:
        print(f"Gemini API Error: {e}")
        return f"Auctioneer is currently unavailable due to an error: {e}"

def parse_gemini_response(gemini_text):
    """
    Parses the Gemini response to extract the GAME_ACTION JSON.
    Returns (narrative, action_json_or_None).
    """
    narrative_parts = []
    action_json = None
    
    lines = gemini_text.strip().split('\n')
    for line in lines:
        if line.startswith('GAME_ACTION:'):
            try:
                # Extract JSON string, ensure it's valid
                json_str = line[len('GAME_ACTION:'):].strip()
                # Remove common markdown code block wrappers if present
                if json_str.startswith('```json'):
                    json_str = json_str[len('```json'):]
                if json_str.endswith('```'):
                    json_str = json_str[:-len('```')]
                json_str = json_str.strip() # Remove any extra whitespace
                action_json = json.loads(json_str)
            except json.JSONDecodeError as e:
                print(f"Error parsing GAME_ACTION JSON: {e}\nProblematic string: '{json_str}'")
                action_json = {"type": "parsing_error", "message": str(e), "raw_json": json_str}
            break # Assume only one GAME_ACTION per response
        else:
            narrative_parts.append(line)
            
    narrative = "\n".join(narrative_parts).strip()
    return narrative, action_json

# --- Game Logic Functions ---

def apply_game_action(action):
    """
    Applies a parsed GAME_ACTION to the global game_state.
    """
    global game_state

    action_type = action.get("type")

    # Prevent reprocessing the same action if Gemini repeats it due to context,
    # EXCEPT for start_item_auction, where Gemini might re-announce.
    # The start_item_auction logic itself will handle if the item is already current.
    action_hash = hash(json.dumps(action, sort_keys=True))
    if action_hash == game_state["last_processed_action"] and action_type != "start_item_auction":
        print(f"Skipping duplicate action: {action_type}")
        return "Duplicate action skipped."
    game_state["last_processed_action"] = action_hash

    if action_type == "init_game":
        players = action.get("players")
        budget = action.get("budget")
        if not players or budget is None:
            return "Error: Missing players or budget for init_game."
        
        game_state["participants"] = {p: budget for p in players}
        game_state["player_items"] = {p: [] for p in players}
        game_state["initial_budget"] = budget # Store initial budget for display
        game_state["status"] = "waiting_for_items"
        game_state["chat_log"].append({"sender": "System", "message": f"Game initialized with players: {', '.join(players)}. Each has {budget} credits."})
        return f"Game initialized for {len(players)} players."

    elif action_type == "add_items":
        items = action.get("items")
        if not items:
            return "Error: No items provided for add_items."
        
        items_to_add = [item.strip() for item in items if item.strip()]
        game_state["item_list"].extend(items_to_add)
        game_state["status"] = "waiting_for_auction_start" if not game_state["current_item"] else game_state["status"]
        game_state["chat_log"].append({"sender": "System", "message": f"Items added: {', '.join(items_to_add)}."})
        
        if game_state["status"] == "waiting_for_auction_start" and not game_state["current_item"] and game_state["item_list"]:
            first_item = game_state["item_list"][0]
            game_state["chat_log"].append({"sender": "Auctioneer", "message": f"Excellent, items have been added! Shall we begin the auction for '{first_item}' now?"})
            game_state["chat_log"].append({"sender": "System", "message": "You can now type 'Start auction for the first item.' or 'Start auction for [Item Name]'."})

        return f"Added {len(items_to_add)} items."

    elif action_type == "start_item_auction":
        item_name = action.get("item")
        if not item_name:
            return "Error: Missing item name for start_item_auction."
        
        if game_state["current_item"] == item_name:
            return f"Auction for '{item_name}' is already underway."
        
        if item_name in game_state["item_list"]:
            game_state["current_item"] = item_name
            # Do NOT remove from item_list yet, it will be removed on sell/unsold
            game_state["current_bid"] = 0 
            game_state["high_bidder"] = None
            game_state["status"] = "bidding"
            game_state["chat_log"].append({"sender": "System", "message": f"Auction for '{item_name}' has started! Current bid: {game_state['current_bid']}"})
            return f"Auction started for '{item_name}'."
        else:
            return f"Error: Item '{item_name}' not found in available items or already auctioned. Available: {', '.join(game_state['item_list'])}"

    elif action_type == "bid":
        player = action.get("player")
        amount = action.get("amount")

        if not player or amount is None:
            return "Error: Missing player or amount for bid."
        if player not in game_state["participants"]:
            return f"Error: Player '{player}' not recognized. Current participants: {', '.join(game_state['participants'].keys())}"
        if game_state["current_item"] is None:
             return "Error: No item is currently being auctioned to bid on."
        if amount <= game_state["current_bid"]:
            return f"Error: Bid of {amount} is not higher than current bid of {game_state['current_bid']}. Minimum bid is {game_state['current_bid'] + 1}."
        if amount > game_state["participants"][player]:
            return f"Error: Player '{player}' does not have enough budget ({game_state['participants'][player]}) for a bid of {amount}."
        
        game_state["current_bid"] = amount
        game_state["high_bidder"] = player
        game_state["chat_log"].append({"sender": "System", "message": f"{player} bids {amount} credits for '{game_state['current_item']}'."})
        return f"Bid updated: {player} at {amount}."

    elif action_type == "sell_item":
        # Get actual state. Gemini might send preferred player/amount, but actual game state takes precedence if different
        item_to_sell = game_state["current_item"]
        
        # If Gemini explicitly sends player/amount for sale, use that
        proposed_player = action.get("player")
        proposed_amount = action.get("amount")

        actual_player = game_state["high_bidder"] if game_state["high_bidder"] else proposed_player
        actual_amount = game_state["current_bid"] if game_state["current_bid"] > 0 else (proposed_amount if proposed_amount is not None else 0)

        if item_to_sell is None:
             return "Error: No item is currently under auction to be sold or declared unsold."

        # Remove item from the general list regardless of sale status
        if item_to_sell in game_state["item_list"]:
            game_state["item_list"].remove(item_to_sell)
        
        if actual_player and actual_player in game_state["participants"] and actual_amount > 0:
            # Valid sale with a bidder and a positive amount
            if game_state["participants"][actual_player] < actual_amount:
                # This should ideally be caught by bid validation, but as a safeguard
                sale_message = f"Error: Player '{actual_player}' cannot afford {actual_amount} credits for '{item_to_sell}'. Item declared unsold."
                game_state["chat_log"].append({"sender": "System", "message": sale_message})
                game_state["auction_history"].append(f"'{item_to_sell}' was declared UNSOLD (affordability issue).")
            else:
                game_state["participants"][actual_player] -= actual_amount
                game_state["player_items"][actual_player].append(item_to_sell)
                game_state["auction_history"].append(f"'{item_to_sell}' sold to {actual_player} for {actual_amount} credits.")
                sale_message = f"'{item_to_sell}' sold to {actual_player} for {actual_amount} credits. {actual_player}'s new budget: {game_state['participants'][actual_player]}."
                game_state["chat_log"].append({"sender": "System", "message": sale_message})
        else:
            # Item is declared unsold (no bids, or player explicitly passed, or player cannot afford)
            game_state["auction_history"].append(f"'{item_to_sell}' was declared UNSOLD (no valid bids or explicit passing).")
            game_state["chat_log"].append({"sender": "System", "message": f"'{item_to_sell}' declared UNSOLD. No valid bids were received."})
        
        # Reset current auction state
        game_state["current_item"] = None
        game_state["current_bid"] = 0
        game_state["high_bidder"] = None
        
        if not game_state["item_list"]:
            game_state["status"] = "game_over"
            game_state["chat_log"].append({"sender": "System", "message": "All items sold or declared unsold! Game Over."})
            return "Game Over: All items processed."
        else:
            # Attempt to automatically start auction for the next item
            next_item = game_state["item_list"][0]

            auto_prompt_for_gemini = f"The previous item '{item_to_sell}' was processed. Please start the auction for the next available item, which is '{next_item}'."
            
            gemini_raw_response_for_auto = generate_gemini_response(auto_prompt_for_gemini, {k: v for k, v in game_state.items() if k != "chat_log"})
            narrative_for_auto, game_action_for_auto = parse_gemini_response(gemini_raw_response_for_auto)

            game_state["chat_log"].append({"sender": "Auctioneer", "message": narrative_for_auto})

            if game_action_for_auto and game_action_for_auto.get("type") == "start_item_auction" and game_action_for_auto.get("item") == next_item:
                result_of_auto_start = apply_game_action(game_action_for_auto)
                return f"Item '{item_to_sell}' processed. Auction for '{next_item}' automatically started. ({result_of_auto_start})"
            else:
                game_state["status"] = "waiting_for_auction_start" 
                game_state["chat_log"].append({"sender": "System", "message": f"Automatic auction start failed for '{next_item}'. Please manually start the auction for it."})
                return f"Item '{item_to_sell}' processed. Next item '{next_item}' is pending manual start."

    elif action_type == "pass":
        player = action.get("player")
        if not player or player not in game_state["participants"]:
            return "Error: Player not recognized for passing."
        if game_state["current_item"] is None:
             return "Error: No item currently being auctioned to pass on."
        
        game_state["chat_log"].append({"sender": "System", "message": f"{player} passes on '{game_state['current_item']}'."})
        # The logic for what happens after a pass (e.g., if all pass, item is sold to highest)
        # needs to be inferred by Gemini and then it should issue a 'sell_item' or 'no_action'
        return f"{player} passed."

    elif action_type == "no_action" or action_type == "parsing_error":
        return f"Gemini narrative only or parsing error: {action.get('message', '')}"

    else:
        return f"Unknown game action type: {action_type}"

# --- Flask Routes ---

@app.route('/')
def index():
    """Serves the main HTML page."""
    return render_template_string(HTML_CONTENT)

@app.route('/process_chat', methods=['POST'])
def process_chat():
    """
    Receives user chat input, sends to Gemini, processes response,
    updates game state, and returns new state for UI update.
    """
    user_input = request.json.get('message')
    if not user_input:
        return jsonify({"success": False, "message": "No message provided."}), 400

    game_state["chat_log"].append({"sender": "You", "message": user_input})

    gemini_friendly_state = {k: v for k, v in game_state.items() if k != "chat_log"}

    gemini_raw_response = generate_gemini_response(user_input, gemini_friendly_state)
    narrative, game_action = parse_gemini_response(gemini_raw_response)

    game_state["chat_log"].append({"sender": "Auctioneer", "message": narrative})

    if game_action:
        action_result = apply_game_action(game_action)
        if game_action.get("type") not in ["no_action", "parsing_error"]:
            # Only add a system message if it was a real action, not just a narrative or parsing error
            if not action_result.startswith("Duplicate action skipped"): # Avoid adding system message for skipped duplicates
                game_state["chat_log"].append({"sender": "System", "message": f"Action processed: {action_result}"})
    
    return jsonify({
        "success": True,
        "narrative": narrative,
        "game_state": game_state
    })

@app.route('/upload_items', methods=['POST'])
def upload_items():
    """
    Handles uploading a CSV or TXT file to add items to the auction.
    """
    if 'file' not in request.files:
        return jsonify({"success": False, "message": "No file part in the request."}), 400

    file = request.files['file']

    if file.filename == '':
        return jsonify({"success": False, "message": "No selected file."}), 400

    if file and (file.filename.endswith('.csv') or file.filename.endswith('.txt')):
        try:
            items = []
            file_content = file.read().decode('utf-8').strip()

            if file.filename.endswith('.csv'):
                csv_reader = csv.reader(io.StringIO(file_content))
                for row in csv_reader:
                    if row: # Ensure row is not empty
                        items.append(row[0].strip()) # Assuming item name is in the first column
            else: # .txt file
                items = [line.strip() for line in file_content.splitlines() if line.strip()]

            if not items:
                return jsonify({"success": False, "message": "No valid items found in the file."}), 400
            
            action_result = apply_game_action({"type": "add_items", "items": items})
            
            return jsonify({
                "success": True,
                "message": f"{len(items)} items uploaded successfully.",
                "game_state": game_state 
            })

        except Exception as e:
            print(f"File upload error: {e}")
            return jsonify({"success": False, "message": f"Error processing file: {e}"}), 500
    else:
        return jsonify({"success": False, "message": "Invalid file type. Please upload a .csv or .txt file."}), 400

@app.route('/reset_game', methods=['POST'])
def reset_game():
    """
    Resets the entire game state to its initial values.
    """
    global game_state
    game_state = get_initial_game_state()
    game_state["chat_log"].append({"sender": "System", "message": "Game has been reset. Start a new auction!"})
    return jsonify({
        "success": True,
        "message": "Game state reset.",
        "game_state": game_state
    })

@app.route('/get_game_state', methods=['GET'])
def get_game_state_route():
    """
    Returns the current full game state. Useful for initial load and periodic updates.
    """
    return jsonify(game_state)

# --- Embedded HTML, CSS, JavaScript ---

HTML_CONTENT = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Auctioneer Game</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4CAF50; /* Green */
            --secondary-color: #388E3C; /* Darker Green */
            --accent-color: #FFC107; /* Amber */
            --background-light: #F1F8E9; /* Lightest Green */
            --background-medium: #E8F5E9; /* Very Light Green */
            --text-color: #212121;
            --border-color: #C8E6C9; /* Light Green Border */
            --shadow-light: 0 2px 5px rgba(0, 0, 0, 0.1);
            --shadow-medium: 0 5px 15px rgba(0, 0, 0, 0.08);
            --success-color: #27ae60;
            --info-color: #2196F3; /* Blue Info */
            --warning-color: #FBC02D; /* Darker Amber Warning */
            --error-color: #D32F2F; /* Red Error */
        }

        /* --- Global Resets & Body Setup --- */
        html, body {
            height: 100%; /* Ensure html and body take full viewport height */
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background-color: var(--background-light);
            color: var(--text-color);
            display: flex;
            flex-direction: column; /* Main content stacked vertically */
            align-items: center;
            min-height: 100vh; /* Ensures body takes full viewport height */
            line-height: 1.6;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        h1, h2, h3 {
            font-family: 'Montserrat', sans-serif;
            color: var(--secondary-color);
            margin-top: 0;
            margin-bottom: 1rem;
            font-weight: 600;
        }

        h1 {
            font-size: 2.8em;
            color: var(--primary-color);
            text-shadow: var(--shadow-light);
            margin-bottom: 25px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--primary-color);
            flex-shrink: 0; /* Prevents H1 from shrinking */
        }

        h2 {
            font-size: 1.8em;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 8px;
            margin-bottom: 15px;
            color: var(--secondary-color);
        }

        h3 {
            font-size: 1.3em;
            color: var(--primary-color);
            margin-bottom: 10px;
        }

        /* --- Main Container (Grid) --- */
        .container {
            display: grid;
            grid-template-columns: 1fr 1fr 2fr; /* Left, Middle, Right panels */
            /* KEY FIX: Use minmax(0, 1fr) for grid rows. This makes the row
               take available height, but allows its children (panels) to
               flex and scroll without being cut off. */
            grid-template-rows: minmax(0, 1fr); 
            gap: 20px;
            width: 95%;
            max-width: 1400px;
            background-color: #fff;
            box-shadow: var(--shadow-medium);
            border-radius: 12px;
            overflow: hidden; /* Good for preventing internal elements from breaking out */
            margin-bottom: 25px; /* Space above footer */
            padding: 20px;
            flex: 1; /* Allows container to grow and fill remaining vertical space in body */
            box-sizing: border-box; 
            min-height: 0; /* CRITICAL for flex item to shrink and allow overflow */
        }

        /* --- Panels within the Grid (Left, Center, Right) --- */
        .left-panel, .center-panel, .right-panel {
            padding: 20px;
            background-color: var(--background-medium);
            border-radius: 10px;
            display: flex;
            flex-direction: column; /* Stack content vertically within panels */
            border: 1px solid var(--border-color);
            /* KEY FIX: Panels *must* take 100% height of their grid cell */
            height: 100%; 
            box-sizing: border-box;
            /* KEY FIX: Allow panel itself to scroll if its content exceeds its height */
            overflow-y: auto; 
            overflow-x: hidden; /* Prevent horizontal scroll on panels */
            min-height: 0; /* CRITICAL for flex item panels to shrink if needed */
        }

        /* --- Individual Sections within Panels (.panel-section) --- */
        .panel-section {
            background-color: #fff;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
            border: 1px solid var(--border-color);
            flex-shrink: 0; /* Prevents panel sections themselves from shrinking */
            /* KEY FIX: Make panel-section a flex container for its content */
            display: flex; 
            flex-direction: column; 
            min-height: 0; /* Allow panel-section to shrink if its content can scroll */
            overflow: hidden; /* Hide any content that tries to burst out of section */
        }
        .panel-section:last-child {
            margin-bottom: 0;
        }

        /* Specific section styles (these are flex-shrink: 0 children of .panel-section) */
        .game-status-section {
            margin-bottom: 20px;
        }
        .current-auction-section {
            margin-bottom: 20px;
        }
        .status-message {
            background-color: var(--primary-color);
            color: white;
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 15px;
            font-weight: 500;
            text-align: center;
            box-shadow: var(--shadow-light);
            font-family: 'Montserrat', sans-serif;
        }
        .status-message.info { background-color: var(--info-color); }
        .status-message.warning { background-color: var(--warning-color); }
        .status-message.error { background-color: var(--error-color); }
        .current-auction-section p {
            margin: 8px 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-right: 5px;
        }
        .current-auction-section strong {
            color: var(--secondary-color);
        }
        .current-auction-section span {
            font-weight: 500;
            color: var(--primary-color);
        }

        /* --- Left Panel Specifics (Item Upload and Reset Button) --- */
        .item-upload-section {
            padding-top: 20px;
            border-top: 1px solid var(--border-color);
            text-align: center;
            flex-shrink: 0; /* Ensures it doesn't shrink */
            margin-bottom: 20px; /* Normal spacing */
        }
        .item-upload-section input[type="file"] {
            display: block;
            margin: 15px auto;
            padding: 8px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            width: calc(100% - 20px);
            max-width: 300px;
            background-color: #fcfcfc;
        }
        .item-upload-section p {
            font-size: 0.9em;
            color: #777;
            margin-top: 5px;
        }

        /* This pushes the reset button to the bottom if the left panel is taller than its minimal content */
        .left-panel > .panel-section:last-child { 
            margin-top: auto; 
        }

        /* --- Scrollable List Wrappers (Content within .panel-section) --- */
        .scrollable-list-wrapper {
            flex: 1; /* KEY FIX: This flex:1 now applies correctly within the flex .panel-section */
            overflow-y: auto;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: #fdfdfd;
            padding: 10px;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.03);
            /* KEY FIX: Removed fixed heights. Rely on flex:1 and min-height:0 for flexibility. */
            min-height: 0; /* CRITICAL: Allows the scrollable area to shrink to enable overflow */
            margin-bottom: 10px; /* Still applies below the wrapper if there are more elements */
            min-width: 0; 
            word-wrap: break-word; 
        }
        /* Specific scrollable lists will now just inherit flex:1 and min-height:0 */
        #participants-list-wrapper, 
        #player-inventories-list-wrapper, 
        #items-remaining-list-wrapper, 
        #auction-history-list-wrapper {
            flex-grow: 1; /* This is largely redundant with flex:1 but doesn't hurt */
            /* REMOVED: max-height values, as they were causing cut-offs when combined with flex:1 */
        }

        .scrollable-list-wrapper ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        .scrollable-list-wrapper li {
            padding: 10px 5px;
            border-bottom: 1px dashed #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.95em;
        }
        .scrollable-list-wrapper li:last-child {
            border-bottom: none;
        }
        .scrollable-list-wrapper li:nth-child(even) {
            background-color: #f4f4f4;
        }
        .scrollable-list-wrapper li.player-inventory-header {
            font-weight: bold;
            background-color: var(--background-medium);
            padding: 8px 5px;
            border-bottom: 2px solid var(--primary-color);
            margin-top: 10px;
            font-family: 'Montserrat', sans-serif;
            color: var(--secondary-color);
            position: sticky; /* Make header sticky if scrolling within player inventory */
            top: 0;
            z-index: 10;
        }
        .scrollable-list-wrapper li.player-inventory-item {
            font-style: italic;
            padding-left: 20px;
            color: #555;
            justify-content: flex-start;
        }

        .player-budget {
            font-weight: 600;
            color: var(--primary-color);
        }
        .player-item-count {
            font-size: 0.8em;
            color: #777;
            margin-left: 10px;
        }

        /* --- Right Panel (Chat Interface) --- */
        .chat-log {
            flex: 1; /* Allows chat log to take up available space in right-panel */
            overflow-y: auto; /* Provides vertical scrollbar */
            overflow-x: hidden; /* Explicitly hide horizontal scroll if any */
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 15px;
            background-color: #fff;
            margin-bottom: 20px; 
            display: flex;
            flex-direction: column; 
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.03);
            /* KEY FIX: Re-introduced a reasonable min-height for default view, but ensures it can flex. */
            min-height: 350px; /* Provides a base height */
            scroll-behavior: smooth;
            word-wrap: break-word; 
        }
        .chat-message {
            margin-bottom: 12px;
            padding: 8px 12px;
            border-radius: 8px;
            max-width: 90%;
            word-wrap: break-word; /* Good for preventing horizontal overflow */
            font-size: 0.95em;
        }
        .chat-message:last-child {
            margin-bottom: 0;
        }
        .chat-message strong {
            font-family: 'Montserrat', sans-serif;
            font-weight: 600;
            margin-right: 5px;
        }
        .chat-message.You {
            background-color: #e8f5e9; /* Light green */
            align-self: flex-end;
            text-align: right;
            border-bottom-right-radius: 0;
        }
        .chat-message.You strong {
            color: var(--accent-color);
        }
        .chat-message.Auctioneer {
            background-color: #e3f2fd; /* Light blue */
            align-self: flex-start;
            text-align: left;
            border-bottom-left-radius: 0;
        }
        .chat-message.Auctioneer strong {
            color: var(--primary-color);
        }
        .chat-message.System {
            background-color: #fffde7; /* Light yellow */
            align-self: center;
            text-align: center;
            color: #555;
            font-style: italic;
            border: 1px dashed #ffe082;
            width: 100%;
            max-width: none; /* Allow system messages to span full width */
        }
        .chat-message.System strong {
            color: var(--info-color);
        }

        .chat-input {
            display: flex;
            padding-top: 15px;
            flex-shrink: 0; 
            margin-top: auto; /* Pushes to bottom of its flex container (right-panel) */
            border-top: 1px solid var(--border-color);
            background-color: var(--background-medium); /* Match panel background */
            padding-bottom: 5px; /* Add some padding at the bottom */
        }
        .chat-input input[type="text"] {
            flex: 1;
            padding: 14px 18px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 1.05em;
            margin-right: 12px;
            transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
            background-color: #fdfdfd;
        }
        .chat-input input[type="text"]:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2); /* Green focus shadow */
        }
        
        button {
            padding: 14px 25px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.05em;
            font-weight: 600;
            transition: background-color 0.2s ease, transform 0.1s ease;
            box-shadow: var(--shadow-light);
            flex-shrink: 0; /* Prevent button from shrinking */
        }
        button:hover {
            background-color: var(--secondary-color); /* Darker primary */
            transform: translateY(-1px);
        }
        button:active {
            transform: translateY(0);
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);
        }
        .item-upload-section button {
            background-color: var(--info-color); /* Use info color for upload */
        }
        .item-upload-section button:hover {
            background-color: #1976D2; /* Darker info */
        }
        .reset-game-button {
            background-color: var(--error-color); /* Red for reset */
            margin-top: 20px; /* Keep some top margin for spacing */
            width: 100%;
        }
        .reset-game-button:hover {
            background-color: #C62828; /* Darker red */
        }

        .game-over-message {
            text-align: center;
            font-size: 1.8em;
            font-weight: 700;
            color: var(--error-color);
            margin-top: 30px;
            padding: 20px;
            background-color: #ffebee; /* Light red background */
            border-radius: 10px;
            border: 2px solid var(--error-color);
            box-shadow: var(--shadow-medium);
        }
        
        footer {
            margin-top: 30px;
            padding: 20px;
            color: #888;
            font-size: 0.9em;
            text-align: center;
            border-top: 1px solid var(--border-color);
            width: 90%;
            max-width: 1400px;
            flex-shrink: 0; 
            margin-top: auto; /* Pushes footer to bottom of body if content is short */
        }

        /* --- Responsive adjustments --- */
        @media (max-width: 1200px) {
            .container {
                grid-template-columns: 1.5fr 2fr; /* Two columns: Left+Middle, Right */
                grid-template-areas:
                    "info chat"
                    "lists chat";
                max-width: 1000px;
                grid-template-rows: minmax(0, 1fr); /* Keep minmax for 2-column layout */
            }
            .left-panel {
                grid-area: info;
            }
            .center-panel {
                grid-area: lists;
            }
            .right-panel {
                grid-area: chat;
            }
            /* Min-height for chat log in this view */
            .chat-log {
                min-height: 300px; 
            }
        }

        @media (max-width: 900px) {
            .container {
                grid-template-columns: 1fr; /* Single column layout */
                grid-template-areas:
                    "info"
                    "lists"
                    "chat";
                padding: 15px;
                gap: 15px;
                min-height: unset; /* Allow container to grow with content in single column */
                grid-template-rows: auto; /* Single column, let rows size to content */
            }
            h1 {
                font-size: 2em;
            }
            /* IMPORTANT: When in a single column, these panels should grow with their content,
               so `height: 100%` and `overflow-y: auto` would conflict. */
            .left-panel, .center-panel, .right-panel {
                padding: 15px;
                height: auto; /* Allow panels to grow with content */
                overflow-y: visible; /* Let the global scrollbar handle this, not individual panels */
            }
            .chat-log {
                min-height: 250px; /* Provide a visual minimum height for chat log in stacked layout */
            }
            .chat-input {
                padding-top: 10px;
                padding-bottom: 0;
            }
            .chat-input input[type="text"], button {
                padding: 12px 15px;
                font-size: 0.95em;
            }
        }

        @media (max-width: 600px) {
            .container {
                grid-template-rows: auto; 
            }
            .left-panel, .center-panel, .right-panel {
                height: auto; 
                overflow-y: visible; 
            }
            .chat-log {
                min-height: 200px; 
            }
        }
    </style>
</head>
<body>
    <h1>AI Auctioneer Game</h1>
    <div class="container">
        <!-- Left Panel: Game Status & Current Auction & Item Upload -->
        <div class="left-panel">
            <div class="panel-section game-status-section">
                <h2>Game Status</h2>
                <div id="status-message" class="status-message info">Loading game...</div>
            </div>

            <div class="panel-section current-auction-section">
                <h3>Current Auction</h3>
                <p><strong>Item:</strong> <span id="auction-item">None</span></p>
                <p><strong>Current Bid:</strong> <span id="current-bid">0</span> credits</p>
                <p><strong>High Bidder:</strong> <span id="high-bidder">None</span></p>
            </div>
            
            <div class="panel-section item-upload-section">
                <h3>Upload Items from File</h3>
                <input type="file" id="item-file-input" accept=".csv, .txt">
                <button onclick="uploadItems()">Upload Items</button>
                <p><i>(File should contain one item name per line)</i></p>
            </div>

            <div class="panel-section">
                <button onclick="resetGame()" class="reset-game-button">Start New Game / Reset</button>
            </div>
        </div>

        <!-- Middle Panel: Participants, Items Remaining, Player Inventories, Auction History -->
        <div class="center-panel">
            <div class="panel-section">
                <h2>Participants</h2>
                <div id="participants-list-wrapper" class="scrollable-list-wrapper">
                    <ul id="participants-list">
                        <li>No participants yet.</li>
                    </ul>
                </div>
            </div>

            <div class="panel-section">
                <h2>Items Remaining</h2>
                <div id="items-remaining-list-wrapper" class="scrollable-list-wrapper">
                    <ul id="items-remaining-list">
                        <li>No items yet.</li>
                    </ul>
                </div>
            </div>

            <div class="panel-section">
                <h2>Player Inventories</h2>
                <div id="player-inventories-list-wrapper" class="scrollable-list-wrapper">
                    <ul id="player-inventories-list">
                        <li>No items purchased yet.</li>
                    </ul>
                </div>
            </div>
            
            <div class="panel-section">
                <h2>Auction History</h2>
                <div id="auction-history-list-wrapper" class="scrollable-list-wrapper">
                    <ul id="auction-history-list">
                        <li>No items sold yet.</li>
                    </ul>
                </div>
            </div>
        </div>

        <!-- Right Panel: Chat Interface -->
        <div class="right-panel">
            <h2>Auction Chat</h2>
            <div id="chat-log" class="chat-log">
                <!-- Chat messages will be dynamically inserted here -->
            </div>
            <div class="chat-input">
                <input type="text" id="user-message" placeholder="Type your message or bid here...">
                <button onclick="sendMessage()">Send</button>
            </div>
        </div>
    </div>
    <footer>
        Powered by Gemini AI and Flask. Designed for zero human effort deployment.
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            fetchGameState(); // Fetch initial state on load
            document.getElementById('user-message').addEventListener('keypress', function(event) {
                if (event.key === 'Enter') {
                    sendMessage();
                }
            });
        });

        async function fetchGameState() {
            try {
                const response = await fetch('/get_game_state');
                const data = await response.json();
                updateUI(data);
            } catch (error) {
                console.error('Error fetching game state:', error);
                // Optionally display a user-friendly error message
            }
        }

        async function sendMessage() {
            const userMessageInput = document.getElementById('user-message');
            const message = userMessageInput.value.trim();
            if (!message) return;

            userMessageInput.value = ''; // Clear input field

            const response = await fetch('/process_chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message }),
            });
            const data = await response.json();
            
            if (data.success) {
                updateUI(data.game_state);
            } else {
                console.error('Error processing chat:', data.message);
                addChatMessage('System Error', data.message, 'System');
            }
        }

        async function uploadItems() {
            const fileInput = document.getElementById('item-file-input');
            const file = fileInput.files[0];

            if (!file) {
                alert('Please select a file to upload.');
                return;
            }

            const formData = new FormData();
            formData.append('file', file);

            try {
                const response = await fetch('/upload_items', {
                    method: 'POST',
                    body: formData,
                });
                const data = await response.json();

                if (data.success) {
                    updateUI(data.game_state);
                    addChatMessage('System', data.message, 'System');
                } else {
                    alert('Error uploading items: ' + data.message);
                }
            } catch (error) {
                console.error('Error uploading items:', error);
                alert('Network error or server issue during upload.');
            } finally {
                fileInput.value = ''; // Clear the file input
            }
        }

        async function resetGame() {
            if (!confirm('Are you sure you want to reset the game? All current progress will be lost.')) {
                return;
            }
            try {
                const response = await fetch('/reset_game', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({}), // Empty body for a reset action
                });
                const data = await response.json();
                if (data.success) {
                    updateUI(data.game_state);
                    // Clear existing chat log and then re-add initial messages
                    const chatLog = document.getElementById('chat-log');
                    chatLog.innerHTML = '';
                    for (const chatEntry of data.game_state.chat_log) {
                        addChatMessage(chatEntry.sender, chatEntry.message, chatEntry.sender);
                    }
                    chatLog.scrollTop = chatLog.scrollHeight;
                } else {
                    alert('Failed to reset game: ' + data.message);
                }
            } catch (error) {
                console.error('Error resetting game:', error);
                alert('Network error during game reset.');
            }
        }

        function addChatMessage(sender, message, type) {
            const chatLog = document.getElementById('chat-log');
            const div = document.createElement('div');
            div.className = `chat-message ${type}`;
            div.innerHTML = `<strong>${sender}:</strong> ${message}`;
            chatLog.appendChild(div);
            chatLog.scrollTop = chatLog.scrollHeight; // Scroll to the latest message
        }

        function updateUI(gameState) {
            // Update Status Message
            const statusMessageDiv = document.getElementById('status-message');
            let statusText = "Game Status: ";
            let statusClass = "info"; 

            if (gameState.status === "waiting_for_init") {
                statusText += "Waiting for game initialization.";
                statusClass = "warning";
            } else if (gameState.status === "waiting_for_items") {
                statusText += "Game initialized. Waiting for items.";
                statusClass = "warning";
            } else if (gameState.status === "waiting_for_auction_start") {
                statusText += "Items added. Waiting to start auction.";
                statusClass = "warning";
            } else if (gameState.status === "bidding") {
                statusText += `Auction for '${gameState.current_item}' is active.`;
                statusClass = "success";
            } else if (gameState.status === "game_over") {
                statusText += "Game Over - All items processed!";
                statusClass = "error";
            }
            statusMessageDiv.textContent = statusText;
            statusMessageDiv.className = `status-message ${statusClass}`;

            // Update Current Auction Info
            document.getElementById('auction-item').textContent = gameState.current_item || 'None';
            document.getElementById('current-bid').textContent = gameState.current_bid || 0;
            document.getElementById('high-bidder').textContent = gameState.high_bidder || 'None';

            // Update Participants List
            const participantsList = document.getElementById('participants-list');
            participantsList.innerHTML = '';
            if (Object.keys(gameState.participants).length === 0) {
                participantsList.innerHTML = '<li>No participants yet.</li>';
            } else {
                for (const player in gameState.participants) {
                    const li = document.createElement('li');
                    const ownedItemsCount = gameState.player_items[player] ? gameState.player_items[player].length : 0;
                    li.innerHTML = `<span>${player}</span> 
                                    <span class="player-budget">${gameState.participants[player]} credits</span>
                                    <span class="player-item-count">(${ownedItemsCount} items)</span>`;
                    participantsList.appendChild(li);
                }
            }

            // Update Items Remaining List
            const itemsRemainingList = document.getElementById('items-remaining-list');
            itemsRemainingList.innerHTML = '';
            const allItems = [...gameState.item_list]; // Copy for items remaining
            if (gameState.current_item && !allItems.includes(gameState.current_item)) {
                allItems.unshift(gameState.current_item + " (current)"); // Add current item to top if not already there
            }

            if (allItems.length === 0) {
                itemsRemainingList.innerHTML = '<li>No items remaining.</li>';
            } else {
                allItems.forEach(item => {
                    const li = document.createElement('li');
                    li.textContent = item;
                    itemsRemainingList.appendChild(li);
                });
            }

            // Update Player Inventories List
            const playerInventoriesList = document.getElementById('player-inventories-list');
            playerInventoriesList.innerHTML = '';
            let hasItemsBought = false;
            for (const player in gameState.player_items) {
                if (gameState.player_items[player].length > 0) {
                    hasItemsBought = true;
                    const headerLi = document.createElement('li');
                    headerLi.className = 'player-inventory-header';
                    headerLi.textContent = `${player}'s Inventory`;
                    playerInventoriesList.appendChild(headerLi);
                    gameState.player_items[player].forEach(item => {
                        const itemLi = document.createElement('li');
                        itemLi.className = 'player-inventory-item';
                        itemLi.textContent = item;
                        playerInventoriesList.appendChild(itemLi);
                    });
                }
            }
            if (!hasItemsBought) {
                playerInventoriesList.innerHTML = '<li>No items purchased yet.</li>';
            }

            // Update Auction History
            const auctionHistoryList = document.getElementById('auction-history-list');
            auctionHistoryList.innerHTML = '';
            if (gameState.auction_history.length === 0) {
                auctionHistoryList.innerHTML = '<li>No items sold yet.</li>';
            } else {
                gameState.auction_history.forEach(entry => {
                    const li = document.createElement('li');
                    li.textContent = entry;
                    auctionHistoryList.appendChild(li);
                });
            }

            // Update Chat Log
            const chatLog = document.getElementById('chat-log');
            // Clear current chat log completely and rebuild to avoid complex diffing logic
            chatLog.innerHTML = '';
            for (const chatEntry of gameState.chat_log) {
                addChatMessage(chatEntry.sender, chatEntry.message, chatEntry.sender);
            }
            chatLog.scrollTop = chatLog.scrollHeight; // Ensure it scrolls to bottom after full rebuild
        }
    </script>
</body>
</html>
"""

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=True) # debug=True for local development. Set to False for production.

------------------------------------------------

Remove the use of api key(ai) and use rule based logic and buttons for auction actions.

Shuffle button for remaining items

Show the price they were bought of the auction items right beside their names in the player inventories.

remember:keep every feature as they are, only remove the use of ai and use logic for making it work just like before.
